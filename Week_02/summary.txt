HashMap的小总结
    通常是作为一个hash表来对待，当量超过限制后会转变为树。类似于TreeMap结构。默认容量大小是16。最大容量2的30次方。当使用无参构造器时候使用的加载因子，加载因子默认是0.75.当链表达到8个就会转为树结构。
    getNode 方法先去校验表的第一个是不是我们的key，如果是直接返回不是那么看一下下一个是不是树节点，也就是是不是已经转换为树结构。如果是那么就需要从树结构获取我们的key。如果不是，那么我们需要在这个链表中循环遍历先去获取这个key位置对应的值。最终获取到返回，没有则返回null。
    put(K key, V value) 插入一个值内部是调用了putVal(hash(key), key, value, false, true);先对key进行hash，如果最后一个节点也就是空那么我们就初始化一个新节点放到这里。如果不是，两个hash值相等，那么这个节点有值，也就是有hash碰撞了，那么新值也要进来，最后返回老值。如果最后一个节点是树节点，那么就依次插入节点。
　　堆是一种特殊的树在数据结构中，是一种完全二叉树就是说除了叶子节点以外都是全都有左右孩子节点这种结构类似与优先堆。堆分为大顶堆，小顶堆。大顶堆也就是父节点大于子节点，所以跟节点就是最大节点。小顶堆是父节点小于子节点，根节点就是最小节点。

堆总结
　　堆在代码中是一个抽象的数据类型，可以叫做优先队列。通常的我们实现一个堆，采用的是二叉堆，也就是说二叉堆是实现堆的一种方式，并不是唯一。当一个堆是一个完全二叉树的时候，那么计算它的高度对于每个节点有 a 个分支,N个节点的高度就是 logaN .
    主要操作
    插入：二叉堆的插入，我们直接在最后节点插入一个元素，之后在进行迭代，元素与父节点比较，如果大于父节点，那么就与父节点替换位置否则不动。这样就保持了堆的状态。
    删除：删除一个节点，将最后一个元素放到要删除的节点位置，之后这个节点与子节点对比，大了则不动小了则移动，直到符合堆结构。
